version: '3.8'

services:
  # Main Phisherman API service
  phisherman-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: phisherman-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - MODEL_PATH=/app/models/ml_model.pkl
      - SCALER_PATH=/app/models/ml_model_scaler.pkl
      - FEATURES_PATH=/app/models/ml_model_features.json
    volumes:
      - ./models:/app/models:ro
      - ./data:/app/data
      - ./logs:/app/logs
      - phisherman-cache:/app/cache
    networks:
      - phisherman-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis cache for performance optimization (optional)
  redis:
    image: redis:7-alpine
    container_name: phisherman-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - phisherman-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB for storing analysis results (optional)
  mongodb:
    image: mongo:7
    container_name: phisherman-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=phisherman
      - MONGO_INITDB_ROOT_PASSWORD=changeme123
      - MONGO_INITDB_DATABASE=phisherman
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
    networks:
      - phisherman-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: phisherman-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - phisherman-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: phisherman-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=changeme123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - phisherman-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: phisherman-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - phisherman-network
    restart: unless-stopped
    depends_on:
      - phisherman-api

networks:
  phisherman-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  phisherman-cache:
    driver: local
  redis-data:
    driver: local
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-logs:
    driver: local
